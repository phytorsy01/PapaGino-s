/**
 * @file This file provides a demonstration of the `useReducer` hook in React.
 * It simulates a simple shopping cart application to illustrate how `useReducer`
 * can manage complex state logic in a centralized and predictable way.
 *
 * The core components are:
 * 1.  `cartReducer`: A function that takes the current state and an action, and returns the new state. It contains all the business logic for manipulating the cart (adding/removing items).
 * 2.  `ShoppingCart` component: The UI component that uses the `useReducer` hook to get the current cart state and a `dispatch` function to send actions to the reducer.
 *
 * This example is intended to clarify the three main parts of the `useReducer` pattern:
 * - The **reducer function** which handles state transitions.
 * - The **`useReducer` hook** initialization within the component.
 * - The **`dispatch` function** used to trigger state updates from event handlers.
 */

/**
 * The initial state shape for the shopping cart.
 * @const {object}
 * @property {Array<object>} items - An array to hold the item objects in the cart.
 * @property {number} totalPrice - The calculated total price of all items.
 */

/**
 * The reducer function that manages the shopping cart's state.
 * It specifies how the state changes in response to actions.
 * @param {object} state - The current state of the cart.
 * @param {object} action - The action to be performed.
 * @param {string} action.type - The type of the action (e.g., 'ADD_ITEM', 'REMOVE_ITEM').
 * @param {object} action.payload - The data associated with the action.
 * @returns {object} The new state after applying the action.
 */

/**
 * A React component that renders a shopping cart interface.
 * It allows users to add and remove items, and it displays the current
 * items and the total price. State is managed via the `useReducer` hook.
 * @returns {JSX.Element} The rendered shopping cart component.
 */

// This file is generated by GitHub Copilot
// because the prompter wanted to learn about the
// useReducer() hook in React 
// It simulates a shopping cart which's state is managed by the reducer


import { useReducer } from "react";

const initialState = {
  items: [],
  totalPrice: 0,
};

// 1. The Reducer: All cart logic is here.
function cartReducer(state, action) {
  switch (action.type) {
    case "ADD_ITEM":
      // Logic to add an item and update the total price
      const newItems = [...state.items, action.payload];
      return {
        ...state,
        items: newItems,
        totalPrice: newItems.reduce((sum, item) => sum + item.price, 0),
      };
    case "REMOVE_ITEM":
      // Logic to remove an item by its id
      const filteredItems = state.items.filter(
        (item) => item.id !== action.payload.id,
      );
      return {
        ...state,
        items: filteredItems,
        totalPrice: filteredItems.reduce((sum, item) => sum + item.price, 0),
      };
    default:
      return state;
  }
}

function ShoppingCart() {
  // 2. Initialize the hook
  const [cartState, dispatch] = useReducer(cartReducer, initialState);

  const handleAddItem = () => {
    const newItem = { id: Date.now(), name: "Pizza Slice", price: 5 };
    // 3. Dispatch an action to update the state
    dispatch({ type: "ADD_ITEM", payload: newItem });
  };

  const handleRemoveItem = (item) => {
    dispatch({ type: "REMOVE_ITEM", payload: { id: item.id } });
  };

  return (
    <div>
      <h2>Shopping Cart</h2>
      <button onClick={handleAddItem}>Add Pizza Slice</button>
      <ul>
        {cartState.items.map((item) => (
          <li key={item.id}>
            {item.name} - ${item.price}
            <button onClick={() => handleRemoveItem(item)}>Remove</button>
          </li>
        ))}
      </ul>
      <h3>Total: ${cartState.totalPrice}</h3>
    </div>
  );
}

export default ShoppingCart;